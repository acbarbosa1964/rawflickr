var s = new Array()

s[0] = "docintro^docintro.html^Introduction^  <p style=\"text-align: center\">  <a href=\"#reqs\">Requirements</a> &mdash; <a href=\"#install\">Installation</a> &mdash; <a href=\"#license\">License</a> &mdash;   <a href=\"#phome\">Project's home</a></p>    <p>This library defines a set of simple wrapper classes intended to interface easily with the Flickr&trade; web service through its published web API. Its structure resembles so closely the API definition&mdash;as found in the <a href=\"http://flickr.com/services/API/\">documentation at Flickr&trade;</a>&mdash;that a call to the library can be visually mapped to an API call with little, if any, effort and changes made to the API can be incorporated to the library in no time.</p>    <p>This version <b>1.2</b> of the the library wraps all the API calls known as of <b>April, 2008</b> and introduces some helper functions and records for common tasks and parameter passing, such as data type bidirectional converters and generic response parsers.</p>    <p>This unit can be used in any kind of project but its main purpose is to serve in testing frameworks, <abbr title=\"quick'n'dirty\">q&amp;d</abbr> utilities and hacks; should you need a higher abstraction level, it'll be probably better for you to use <a href=\"http://www.daremon.gr/flickr/\">dFlickr</a> (by Dimitris Giannitsaros), wait to the release of my own <i>cooked</i><sup>*</sup> one or even use <b>RawFlickr</b> as a foundation for your own.</p>    <h2 id=\"reqs\">Requirements</h2>    <p>This is a Delphi library, so it seems like a good idea to have some version of Delphi at hand. The development was made with a Delphi 5 Enterprise Edition over a Windows XP SP2 platform, but there is nothing that I know of to prevent you from using it in any other platform or Delphi version. If you do that, drop me a line; I'd like to hear about it. I'm working on Kylix and Freepascal versions; don't hesitate to join me, if you want it.</p>    <p>Beyond Borland/Inprise's, I've used some of my own and third-party libraries. Mine, that should be inside the distribution package, are:  <ul>  <li><b>DateTimeExt.pas</b>: conversion routines for UTC and local date/time, and Unix timestamps and MySQL dates to/from TDateTime;</li>  <li><b>StringsExt.pas</b>: provides lightweight task-specific classes to use instead of TStrings descendants;</li>  <li><b>rfNetHlp.pas</b>: Internet helper routines for Rawflickr.</li>  </ul>  The third-party libraries are:  <ul>  <li><a href=\"http://www.fichtner.net/delphi/md5/\">MD5.pas</a><span style=\"color: navy\">*</span>, by Matthias Fichtner; <i>it's used in RAWFLICKR.PAS to calculate the signature for signed calls and can be replaced for almost any other equivalent</i>.</li>  <li><a href=\"http://www.destructor.de/\">LibXMLParser</a><span style=\"color: navy\">*</span>, by Stefan Heymann; <i>it's used in RAWFLICKR.PAS for the tiny default parsers. It could be replaced even by simple string functions, but this way it's a bit more elegant</i>.</li>  <li><a href=\"http://www.indyproject.org\">Internet Direct (Indy) Version 9</a>, by the Indy Project team. <i>RawFlickr uses just but indirectly, through the few calls to NETEXT.PAS; thus, it can be replaced just by a new or modified version of those calls</i>. (to self: no longer true: see source)</li>  </ul>  <span style=\"color: navy\">*</span>  <span style=\"color: navy; font-size:small; font-style: italic\">These libraries are freely re-distributable, so I've included them in the distribution to avoid the risk of introducing an incompatibility.</span></p>    <p>There are very few places where these 3rd party libraries are used so it should be easy to get rid of or substitute them if needed.</p>    <hr>  <h2 id=\"install\">Installation</h2>    <p>Provided you have already installed Indy 9, there's no special process required; simply install it as you'd do with any other set of units: dump them anywhere and add the path to your <i>library path</i>.</p>    <p>If you haven't them yet, unzip and do the same with <code>MD5.zip</code> and <code>xmlparser.zip</code>. LibXMLParser comes with some nifty components and packages for Delphi 4 to 7 to install them, but to use Rawflickr you only need to make sure that Delphi can find LibXMLParser.pas when needed.</p>    <hr>  <h2 id=\"license\">License</h2>    <p>Well, here comes the legalesse:</p>    <p>The contents of my source file/-s are subject to the Mozilla Public License Version 1.1 (the \"License\"); you may not use this file except in compliance with the License. You can obtain a copy of the License at <a href=\"http://www.mozilla.org/MPL/\">http://www.mozilla.org/MPL/</a></p>    <p>Software distributed under the License is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language governing rights and limitations under the License.</p>    <p>The Original Code covered by this license is <code>Rawflickr</code>, a Flickr API kit for Delphi first released in October 2005.</p>    <p>The Initial Developer of the Original Code is Luis Caballero Martínez.</p>    <p>Portions created by the Initial Developer are the copyright &copy; 2005-2008 Luis Caballero Martínez. All Rights Reserved.</p>    <hr>  <h2 id=\"phome\">Project's home</h2>    <p>The project's home address is: <a href=\"http://rawflickr.webhop.net/\">http://rawflickr.webhop.net</a>. You'll find there the latest version, documentation, news, support, etc.</p>    <p>You'll end up probably in <code>http://usuarios.lycos.es/rawflickr</code> (as of December 2006) but don't bookmark this address. Whatever the time it keeps there, the project  can be moved without a moment notice; the former link, however, will always take you to the correct server, wherever it is. That is, unless <a href=\"http://www.dyndns.com/\">DynDNS</a> (where the global redirection is set up) goes out unexpectedly (or I <em>forget</em> to renew my subscription!)!</p>    <p><b>Note - 2008</b>: This project is in the process of being transferred to <a href=\"http://code.google.com/p/rawflickr/\">Google Code Hosting</a> and a <a href=\"http://rawflickr.blogspot.com\">companion blog</a> has been already opened in <a href=\"http://www.blogger.com/\">Blogger</a>. I'll probably move the web to <a href=\"http://pages.google.com/\">Google Pages</a>, also. See? Things change...</p>  <hr>  <h2 id=\"phome\">About this documentation</h2>  <p>This documentation has been generated directly from the source with <a href=\"http://pasdoc.sourceforge.net/\">PasDoc 0.10.0</a>. While a huge effort has been made to make the documention as complete as possible, there might yet be some parts undocumented or (worse) with old nonsense marker-comments. My apologies for that but, after all, you can always go to the source, isn't it?</p>    <h3 style=\"text-align: center\">Happy coding!</h3>    Introduction^0"
s[1] = "DateTimeExt^DateTimeExt.html^Date/Time conversion routines^       <p>Copyright 1998, 2005 by Luis Caballero Martínez. All rights reserved. Released under a Mozilla Public License 1.1 Luis Caballero <luiscamar@users.sourceforge.net>  ^0"
s[2] = "DateTimeExt.TDateRange^DateTimeExt.TDateRange.html^Helper class for use of date ranges as fields, function parameters, etc.^ ^0"
s[3] = "DateTimeExt.TDateRange.Create^DateTimeExt.TDateRange.html#Create^Default constructor, for overloading^    ^0"
s[4] = "DateTimeExt.TDateRange.Create^DateTimeExt.TDateRange.html#Create^Range constructor^ No check is made to see if ToDate &gt;= FromDate    ^0"
s[5] = "DateTimeExt.TDateRange.MinDate^DateTimeExt.TDateRange.html#MinDate^Minimum date^ ^0"
s[6] = "DateTimeExt.TDateRange.MaxDate^DateTimeExt.TDateRange.html#MaxDate^Maximum date^ ^0"
s[7] = "DateTimeExt.sDateTooOld^DateTimeExt.html#sDateTooOld^Error string used when DateTimeToUnix raises EConvertError^ ^0"
s[8] = "DateTimeExt.UnixDateDelta^DateTimeExt.html#UnixDateDelta^TDateTime equivalent of a &quot;zero&quot; Unix timestamp.^ It was calculated with <code>EncodeDate(1970, 01, 01)</code> ^0"
s[9] = "DateTimeExt.UTCToLocal^DateTimeExt.html#UTCToLocal^Returns the local equivalent of a UTC DateTime^ This function is accurate only in Windows NT; in Windows 95, 98 and ME it'll fail if the date to convert is in daylight saving range and the system's current is not or viceversa.    <p>The bias of the fail will be the same as that between both date ranges p.e. if you are in Europe, the system's date is Dec. 28th and pass Aug. 18 to the function (or viceversa), the difference will be abs(CEST - CET)    ^0"
s[10] = "DateTimeExt.LocalToUTC^DateTimeExt.html#LocalToUTC^Returns the UTC equivalent of a local DateTime^ Accurate only on Windows NT systems.     ^0"
s[11] = "DateTimeExt.MySQLToDateTime^DateTimeExt.html#MySQLToDateTime^Returns a Delphi TDateTime corresponding to a MySQL date/time string^ This function can be used also with other date-string formats, but don't push it too far or it'll break down...    ^0"
s[12] = "DateTimeExt.DateTimeToMySQL^DateTimeExt.html#DateTimeToMySQL^Converts a TDateTime to a date/time string in MySQL format^    ^0"
s[13] = "DateTimeExt.UnixToDateTime^DateTimeExt.html#UnixToDateTime^Returns a TDateTime equivalent to a Unix timestamp^ This function depends on Delphi's internal represention of TDateTime.    ^0"
s[14] = "DateTimeExt.DateTimeToUnix^DateTimeExt.html#DateTimeToUnix^Converts a TDateTime into a Unix timestamp^ This function depends on Delphi's internal represention of TDateTime.     EConvertError if trying to convert a date prior Jan, 1, 1970^0"
s[15] = "Rawflickr^Rawflickr.html^Basic (raw) wrapper interface to Flickr's REST API^       <p>This unit contains a set of wrapper classes to interface with Flickr through the REST Flickr API. There is also limited support for interfacing with 23*, a european photo sharing site that uses a Flickr-like API; this feature, though, is in beta state yet so please, notify me about any bugs you may find.    <p>More information in: </p>    <ul class=\"paragraph_spacing\">    <li><p>Flickr API:<br> <a  target=\"_parent\" href=\"http://www.flickr.com/services/api/\">http://www.flickr.com/services/api/</a></p></li>    <li><p>23 API Implementation notes:<br> <a  target=\"_parent\" href=\"http://www.23hq.com/doc/api\">http://www.23hq.com/doc/api</a></p></li>    <li><p>Rawflickr support:<br> <a  target=\"_parent\" href=\"http://rawflickr.webhop.net\">http://rawflickr.webhop.net</a></p></li>  </ul>    <p>    <p><b>Maintainers:</b> </p>    <ul class=\"paragraph_spacing\">    <li><p>LCM : Luis Caballero &lt;rawflickr@lycos.es&gt;</p></li>  </ul>    <p> <b>Credits:</b> </p>    <ul class=\"paragraph_spacing\">    <li><p>MD5.pas, by Matthias Fichtner: <a  target=\"_parent\" href=\"http://www.fichtner.net/delphi/md5/\">http://www.fichtner.net/delphi/md5/</a></p></li>    <li><p>LibXMLParser, by Stefan Heymann: <a  target=\"_parent\" href=\"http://www.destructor.de/\">http://www.destructor.de/</a></p></li>    <li><p>Internet Direct (Indy) version 9.0: <a  target=\"_parent\" href=\"http://www.indyproject.org\">http://www.indyproject.org</a></p></li>  </ul>    <p> Luis Caballero <luiscamar@users.sourceforge.net>  ^0"
s[16] = "Rawflickr.TWebService^Rawflickr.TWebService.html^Part of the &quot;multi-services&quot; feature.^ This class should be considered magic. Don't mess with it. ^0"
s[17] = "Rawflickr.TWebService.Create^Rawflickr.TWebService.html#Create^Class constructor^    ^0"
s[18] = "Rawflickr.TWebService.ServiceType^Rawflickr.TWebService.html#ServiceType^Type of service^ ^0"
s[19] = "Rawflickr.TWebService.BaseURI^Rawflickr.TWebService.html#BaseURI^Base URI for endpoints^ ^0"
s[20] = "Rawflickr.TWebService.Endpoint^Rawflickr.TWebService.html#Endpoint^Array of endpoint URIs relative to <a class=\"normal\"  href=\"Rawflickr.TWebService.html#BaseURI\">BaseURI</a>^ ^0"
s[21] = "Rawflickr.TBasicUser^Rawflickr.TBasicUser.html^Basic User Info^ ^0"
s[22] = "Rawflickr.TBasicUser.NSID^Rawflickr.TBasicUser.html#NSID^User ID on the web service^ ^0"
s[23] = "Rawflickr.TBasicUser.UserName^Rawflickr.TBasicUser.html#UserName^User's nickname^ ^0"
s[24] = "Rawflickr.TBasicUser.FullName^Rawflickr.TBasicUser.html#FullName^User's &quot;real&quot; name (as set in the profile)^ ^0"
s[25] = "Rawflickr.TFlickr^Rawflickr.TFlickr.html^Base service class^ This class is the basic &quot;service info&quot; wrapper used as <code>Owner</code> in <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html\">TRESTApi</a> and descendants.    <p>Use this class only if you need single, manual instances of <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html\">TRESTApi</a> descendants; otherwise it'll we easier for you to instantiate a <a class=\"normal\"  href=\"Rawflickr.TFlickrEx.html\">TFlickrEx</a> object and access the API through its properties. ^0"
s[26] = "Rawflickr.TFlickr.Create^Rawflickr.TFlickr.html#Create^Class constructor.^       ^0"
s[27] = "Rawflickr.TFlickr.ApiKey^Rawflickr.TFlickr.html#ApiKey^API key associated to the application.^ Actually, setting it does no more than setting a private field used by <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SimpleCall\">TRESTApi.SimpleCall</a> and <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SignedCall\">TRESTApi.SignedCall</a>, but as it has other implications this will probably change in the future.    <p>To access Flickr you must use a valid key issued by them (along with the associated shared secret, see <a class=\"normal\"  href=\"Rawflickr.TFlickr.html#Secret\">Secret</a>). For 23, though, you can use any random string (they suggest your application name) or the same key as for Flickr (which I don't recommend). ^0"
s[28] = "Rawflickr.TFlickr.Secret^Rawflickr.TFlickr.html#Secret^The shared secret associated with your API key.^ Actually, setting it does no more than setting a private field used by <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SignedCall\">TRESTApi.SignedCall</a> to build the request's signature, but as it has other implications this will probably change in the future.    <p>Note that 23 doesn't issues API keys and thus they neither need or use a shared secret to sign calls. ^0"
s[29] = "Rawflickr.TFlickr.Service^Rawflickr.TFlickr.html#Service^Type of service we'are going to use.^ This property determines the URI of the API endpoint and how signed calls (see <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SignedCall\">TRESTApi.SignedCall</a>) are signed.    <p>Setting <code>Service.ServiceType</code> will also change <code>Service.BaseURI</code> to the corresponding <a class=\"normal\"  href=\"Rawflickr.html#KnownBaseURI\">KnownBaseURI</a>; if needed, you can later set a different <code>Service.BaseURI</code> p.e. if you set: <code>Service.ServiceType := stOther</code>.    <p>By itself, <code>Service.ServiceType</code> determines how calls are signed. Services other than Flickr &mdash;p.e. 23&mdash; issue neither API keys or secrets and, thus, don't need the MD5 signatures. Since sending a signature when it's not needed represents a security risk, we don't do it.    <p><b>2007-01-07</b>: This property has been completely reimplemented; if you have code like the old recommended: </p>    <pre class=\"longcode\">       flickr.Service := st23;       UseEndPoint(ep23);       flickr.ApiKey := <span class=\"pascal_string\">'My23ApiKey'</span>;      </pre>    <p> you should change it to something like: </p>    <pre class=\"longcode\">       flickr.Service.ServiceType := st23;       flickr.ApiKey := <span class=\"pascal_string\">'My23ApiKey'</span>;      </pre>    <p>  ^0"
s[30] = "Rawflickr.TFlickr.Token^Rawflickr.TFlickr.html#Token^Authentication token.^ The value of this property is updated every time you call <a class=\"normal\"  href=\"Rawflickr.TAuth.html#checkToken\">TAuth.checkToken</a>, <a class=\"normal\"  href=\"Rawflickr.TAuth.html#getToken\">TAuth.getToken</a> or <a class=\"normal\"  href=\"Rawflickr.TAuth.html#getFullToken\">TAuth.getFullToken</a>. You can set it directly if you have a valid token from a previous authentication but in that case you may better use <a class=\"normal\"  href=\"Rawflickr.TAuth.html#checkToken\">TAuth.checkToken</a>; that way you won't only ensure that the token is still valid, but also update <a class=\"normal\"  href=\"Rawflickr.TFlickr.html#User\">TFlickr.User</a> with the correct user's info. ^0"
s[31] = "Rawflickr.TFlickr.Level^Rawflickr.TFlickr.html#Level^Permissions level for which the token&ndash;if any&ndash;is valid.^ It will be updated by a successful call to any of the <a class=\"normal\"  href=\"Rawflickr.TAuth.html\">TAuth</a> methods that either use it or get it from its response (Note that <a class=\"normal\"  href=\"Rawflickr.TAuth.html\">TAuth</a> methods always parse its responses.) ^0"
s[32] = "Rawflickr.TFlickr.User^Rawflickr.TFlickr.html#User^Basic user info^ ^0"
s[33] = "Rawflickr.EFlickrError^Rawflickr.EFlickrError.html^Base exception class for errors returned from the backend.^ This exception should only be raised if the REST payload is invalid or contains a 'fail' response. You can find a example of use in the implementation of <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#ParseResponse\">TRESTApi.ParseResponse</a>. ^0"
s[34] = "Rawflickr.EFlickrError.Code^Rawflickr.EFlickrError.html#Code^Numeric code parsed from a fail response.^ ^0"
s[35] = "Rawflickr.EFlickrBadResponse^Rawflickr.EFlickrBadResponse.html^Exception class for invalid response or unrecognised RSP status.^ ^0"
s[36] = "Rawflickr.TRESTApi^Rawflickr.TRESTApi.html^Base REST API Implementation.^ This generic, base class implements most of the behaviour needed to access a web service. It was built specifically to access Flickr(tm) but you may probably descend from it the classes needed for services using a like API paradigm.    <p>Even though it isn't an abstract one, you shouldn't need to make instances of this class; rather, derive a child class implementing the specific behaviour you need, like this library does. ^0"
s[37] = "Rawflickr.TRESTApi.Lock^Rawflickr.TRESTApi.html#Lock^Multithreading.^ Not yet documented.    ^0"
s[38] = "Rawflickr.TRESTApi.UnLock^Rawflickr.TRESTApi.html#UnLock^Multithreading.^ Not yet documented.    ^0"
s[39] = "Rawflickr.TRESTApi.SignedCall^Rawflickr.TRESTApi.html#SignedCall^Prepares and issues a signed call to the endpoint^    ^0"
s[40] = "Rawflickr.TRESTApi.SimpleCall^Rawflickr.TRESTApi.html#SimpleCall^Prepares and issues an unsigned call to the endpoint unless <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SignAll\">SignAll</a> = <code>True</code>, in which case control will be transferred to <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SignedCall\">SignedCall</a>.^    ^0"
s[41] = "Rawflickr.TRESTApi.ParseResponse^Rawflickr.TRESTApi.html#ParseResponse^Default response parser.^ All it does is to build a INI-like structure using a simple <code>XMLToStrings</code> function    ^0"
s[42] = "Rawflickr.TRESTApi.CheckError^Rawflickr.TRESTApi.html#CheckError^REST response checking.^ This method checks whether a REST response status is &quot;fail&quot;, &quot;ok&quot; or isn't valid&mdash;i.e. the status is neither of those two or it isn't even a valid XML REST payload.      EFlickrError descendant if the status is &quot;fail&quot;. EFlickrBadResponse if the status is neither &quot;fail&quot; or &quot;ok&quot;, case that includes invalid REST payloads.^0"
s[43] = "Rawflickr.TRESTApi.CheckAndSave^Rawflickr.TRESTApi.html#CheckAndSave^Saves a response into a stream.^ Since the response is saved after checking it with <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#CheckError\">CheckError</a> and <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#CheckError\">CheckError</a> raises an exception on error conditions, you can only save valid, non-fail responses with this procedure.    ^0"
s[44] = "Rawflickr.TRESTApi.CheckAndSave^Rawflickr.TRESTApi.html#CheckAndSave^Saves a response into a file.^ All this method does is to create a file stream and then call the &quot;stream&quot; variant. See its notes    ^0"
s[45] = "Rawflickr.TRESTApi.FlickrCall^Rawflickr.TRESTApi.html#FlickrCall^Generic Flickr method call^ All it does is select and call either SimpleCall or SignedCall, depending of the value of the parameter <code>Signed</code>    ^0"
s[46] = "Rawflickr.TRESTApi.Create^Rawflickr.TRESTApi.html#Create^Default class constructor.^    AOwner TFlickr instance that &quot;owns&quot; the object. Sign <code>sgnAlways</code>: Issue always signed calls<br> <code>sgnRequired</code>: Sign call only when required (default)  ^0"
s[47] = "Rawflickr.TRESTApi.Destroy^Rawflickr.TRESTApi.html#Destroy^^    ^0"
s[48] = "Rawflickr.TRESTApi.SignAll^Rawflickr.TRESTApi.html#SignAll^Tells <code>TRESTApi</code> when to issue signed call^ When set to <code>True</code> <code>TRESTApi</code> will issue <b>all</b> calls as signed, even if made through <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#SimpleCall\">SimpleCall</a>. ^0"
s[49] = "Rawflickr.TRESTApi.Request^Rawflickr.TRESTApi.html#Request^Request parameters for a call to flickr.^ Use this property to set the parameters of the request if you're implementing a flickr method in a <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html\">TRESTApi</a> descendant. Other users of the library should consider this value as read-only; after a flickr method call you'll find here all the parameters as passed to the HTTP client. ^0"
s[50] = "Rawflickr.TRESTApi.LastResponse^Rawflickr.TRESTApi.html#LastResponse^Latest RSP received from the web service. Read-only.^ ^0"
s[51] = "Rawflickr.TRESTApi.Owner^Rawflickr.TRESTApi.html#Owner^<a class=\"normal\"  href=\"Rawflickr.TFlickr.html\">TFlickr</a> or descendant &quot;owning&quot; this class' instance.^ Though this &quot;ownership&quot; is a somewhat difussed concept, all descendants of this class get fields from its <code>Owner</code>, so you need to provide them a valid instance of <a class=\"normal\"  href=\"Rawflickr.TFlickr.html\">TFlickr</a>&ndash;of course, unless the object is indeed a <code>TFlickr</code> instance's property. ^0"
s[52] = "Rawflickr.TRESTApi.Throttle^Rawflickr.TRESTApi.html#Throttle^Controls a delay between calls.^ If non-zero, any call to ??? will wait for 'value' 100th of seconds before returning, thus implementing a crude &quot;bandwidth&quot; control. ^0"
s[53] = "Rawflickr.TRESTApi.RandomWait^Rawflickr.TRESTApi.html#RandomWait^Controls how <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#Throttle\">Throttle</a> will be interpreted.^ If set, <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#Throttle\">Throttle</a> will be interpreted as the maximum wait value, rather than as an uniform wait value. ^0"
s[54] = "Rawflickr.TRESTApi.ErrorClass^Rawflickr.TRESTApi.html#ErrorClass^Class reference for exceptions raised for invalid or &quot;fail&quot; responses^ ^0"
s[55] = "Rawflickr.TActivity^Rawflickr.TActivity.html^Implements flickr.activity.* methods^ ^0"
s[56] = "Rawflickr.TActivity.userComments^Rawflickr.TActivity.html#userComments^Implements flickr.activity.userComments^    ^0"
s[57] = "Rawflickr.TActivity.userPhotos^Rawflickr.TActivity.html#userPhotos^Implements flickr.activity.userPhotos^    ^0"
s[58] = "Rawflickr.TActivity.Create^Rawflickr.TActivity.html#Create^Class constructor; see <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#Create\">TRESTApi.Create</a>^    ^0"
s[59] = "Rawflickr.EFlickrAuthError^Rawflickr.EFlickrAuthError.html^Descendant of <a class=\"normal\"  href=\"Rawflickr.EFlickrError.html\">EFlickrError</a> used in <code>TAuth</code>.^ ^0"
s[60] = "Rawflickr.TAuth^Rawflickr.TAuth.html^Implements flickr.auth.* methods.^ The authentication process for Flickr is explained in the document &quot;Authentication API&quot; &lt;<a  target=\"_parent\" href=\"http://www.flickr.com/services/api/auth.spec.html\">http://www.flickr.com/services/api/auth.spec.html</a>&gt;. For 23, consult &quot;User authentication&quot; at &lt;<a  target=\"_parent\" href=\"http://www.23hq.com/doc/api/auth\">http://www.23hq.com/doc/api/auth</a>&gt; ^0"
s[61] = "Rawflickr.TAuth.ParseResponse^Rawflickr.TAuth.html#ParseResponse^Parses checkToken / getToken RSP and (if sucessful) updates TFlickr(Owner).UserInfo, Token and Level (i.e.^ the account info).    ^0"
s[62] = "Rawflickr.TAuth.ParseFrobResp^Rawflickr.TAuth.html#ParseFrobResp^Parses a getFrob response and returns (if sucessful) a frob.^    ^0"
s[63] = "Rawflickr.TAuth.checkToken^Rawflickr.TAuth.html#checkToken^Implements flickr.auth.checkToken As a collateral effect it updates the Owner's account info i.e.^ <code>UserInfo</code>, <code>Token</code> and <code>Level</code> (see <a class=\"normal\"  href=\"Rawflickr.TFlickr.html\">TFlickr</a>)    ^0"
s[64] = "Rawflickr.TAuth.getFrob^Rawflickr.TAuth.html#getFrob^Implements flickr.auth.getFrob.^ <b>NOTE</b> that this call doesn't return any XML payload. It will instead try to parse the response and return the frob; If it doesn't succeeds you'll receive an exception raised from the default parser.    ^0"
s[65] = "Rawflickr.TAuth.getFullToken^Rawflickr.TAuth.html#getFullToken^Implements flickr.auth.getFullToken.^ Same collateral effects that <a class=\"normal\"  href=\"Rawflickr.TAuth.html#checkToken\">checkToken</a>    ^0"
s[66] = "Rawflickr.TAuth.getToken^Rawflickr.TAuth.html#getToken^Implements flickr.auth.getToken.^ Same collateral effects that <a class=\"normal\"  href=\"Rawflickr.TAuth.html#checkToken\">checkToken</a>    ^0"
s[67] = "Rawflickr.TAuth.GetLoginLink^Rawflickr.TAuth.html#GetLoginLink^Returns an AnsiString containing the unencoded URI to which the user must navigate in order to authenticate the application.^    ^0"
s[68] = "Rawflickr.TAuth.GetLoginLinkW^Rawflickr.TAuth.html#GetLoginLinkW^Returns a WideString containing the unencoded URI to which the user must navigate in order to authenticate the application.^    ^0"
s[69] = "Rawflickr.TAuth.Create^Rawflickr.TAuth.html#Create^Class constructor.^ Unlike the inherited one, it doesn't accept a <a class=\"normal\"  href=\"Rawflickr.html#TSignOption\">TSignOption</a> parameter. Since all flickr.auth.* methods must be signed, I introduced this constraint to circumvent an already corrected bug in Flickr and prevent a common error.    ^0"
s[70] = "Rawflickr.TAuth.SignAll^Rawflickr.TAuth.html#SignAll^Read Only.^ Write access is banned because all auth calls are signed ^0"
s[71] = "Rawflickr.TBlogPhoto^Rawflickr.TBlogPhoto.html^Record used for <a class=\"normal\"  href=\"Rawflickr.TBlogs.html#postPhoto\">TBlogs.postPhoto</a>^ ^0"
s[72] = "Rawflickr.TBlogPhoto.blogId^Rawflickr.TBlogPhoto.html#blogId^^ ^0"
s[73] = "Rawflickr.TBlogPhoto.photoId^Rawflickr.TBlogPhoto.html#photoId^^ ^0"
s[74] = "Rawflickr.TBlogPhoto.title^Rawflickr.TBlogPhoto.html#title^^ ^0"
s[75] = "Rawflickr.TBlogPhoto.description^Rawflickr.TBlogPhoto.html#description^^ ^0"
s[76] = "Rawflickr.TBlogPhoto.blogPassword^Rawflickr.TBlogPhoto.html#blogPassword^^ ^0"
s[77] = "Rawflickr.TBlogs^Rawflickr.TBlogs.html^Implements flickr.blogs.*^ ^0"
s[78] = "Rawflickr.TBlogs.getList^Rawflickr.TBlogs.html#getList^Implements flickr.blogs.getList^    ^0"
s[79] = "Rawflickr.TBlogs.postPhoto^Rawflickr.TBlogs.html#postPhoto^Implements flickr.blogs.postPhoto ('record' variant)^    ^0"
s[80] = "Rawflickr.TBlogs.postPhoto^Rawflickr.TBlogs.html#postPhoto^Implements flickr.blogs.postPhoto (API variant)^    ^0"
s[81] = "Rawflickr.TBlogs.Create^Rawflickr.TBlogs.html#Create^Class constructor; see <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#Create\">TRESTApi.Create</a>^    ^0"
s[82] = "Rawflickr.TContacts^Rawflickr.TContacts.html^Implements flickr.contacts.*^ ^0"
s[83] = "Rawflickr.TContacts.getList^Rawflickr.TContacts.html#getList^Implements flickr.contacts.getList^    ^0"
s[84] = "Rawflickr.TContacts.getPublicList^Rawflickr.TContacts.html#getPublicList^Implements flickr.contacts.getPublicList^    ^0"
s[85] = "Rawflickr.TContacts.Create^Rawflickr.TContacts.html#Create^Class constructor; see <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#Create\">TRESTApi.Create</a>^    ^0"
s[86] = "Rawflickr.TPageSet^Rawflickr.TPageSet.html^Combines Flickr lists parameters <code>page</code> and <code>per_page</code>^ ^0"
s[87] = "Rawflickr.TPageSet.perpage^Rawflickr.TPageSet.html#perpage^[1..MaxInt], else omitted (use flickr's default)^ ^0"
s[88] = "Rawflickr.TPageSet.page^Rawflickr.TPageSet.html#page^{No.^ of the page to get; if 0, use flickr's default ^0"
s[89] = "Rawflickr.TXtraParams^Rawflickr.TXtraParams.html^Extra params used in photo-list's calls.^ Flickr methods that return a list of photos take these optional arguments to refine the response. Using a record allows you to set them once for all with <a class=\"normal\"  href=\"Rawflickr.html#BuildXtraParams\">BuildXtraParams</a> or use the predefined constants <a class=\"normal\"  href=\"Rawflickr.html#EmptyXtra\">EmptyXtra</a> and <a class=\"normal\"  href=\"Rawflickr.html#FullXtras\">FullXtras</a>. ^0"
s[90] = "Rawflickr.TXtraParams.extras^Rawflickr.TXtraParams.html#extras^extra info to retrieve^ See <a class=\"normal\"  href=\"Rawflickr.html#AllXtras\">AllXtras</a> for a list of values available ^0"
s[91] = "Rawflickr.TXtraParams.perpage^Rawflickr.TXtraParams.html#perpage^[1..500], else omitted (which usually means 100)^ ^0"
s[92] = "Rawflickr.TXtraParams.page^Rawflickr.TXtraParams.html#page^For multipage lists, no.^ of the page to get. ^0"
s[93] = "Rawflickr.TFavorites^Rawflickr.TFavorites.html^Implements flickr.favorites.*^ ^0"
s[94] = "Rawflickr.TFavorites.getList^Rawflickr.TFavorites.html#getList^Implements flickr.favorites.getList (record variant)^    ^0"
s[95] = "Rawflickr.TFavorites.getList^Rawflickr.TFavorites.html#getList^Implements flickr.favorites.getList (API-like variant)^    ^0"
s[96] = "Rawflickr.TFavorites.getPublicList^Rawflickr.TFavorites.html#getPublicList^Implements flickr.favorites.getPublicList^    ^0"
s[97] = "Rawflickr.TFavorites.Add^Rawflickr.TFavorites.html#Add^Implements flickr.favorites.Add^    ^0"
s[98] = "Rawflickr.TFavorites.Remove^Rawflickr.TFavorites.html#Remove^Implements flickr.favorites.Remove^    ^0"
s[99] = "Rawflickr.TFavorites.Create^Rawflickr.TFavorites.html#Create^^    ^0"
s[100] = "Rawflickr.TGroups^Rawflickr.TGroups.html^Implements flickr.groups.*^ ^0"
s[101] = "Rawflickr.TGroups.browse^Rawflickr.TGroups.html#browse^Implements flickr.groups.browse^    ^0"
s[102] = "Rawflickr.TGroups.getInfo^Rawflickr.TGroups.html#getInfo^Implements flickr.groups.getInfo^    ^0"
s[103] = "Rawflickr.TGroups.search^Rawflickr.TGroups.html#search^Implements flickr.groups.search^    ^0"
s[104] = "Rawflickr.TGroups.Create^Rawflickr.TGroups.html#Create^^    ^0"
s[105] = "Rawflickr.TGroups.Destroy^Rawflickr.TGroups.html#Destroy^^    ^0"
s[106] = "Rawflickr.TGroups.Pools^Rawflickr.TGroups.html#Pools^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPools.html\">TPools</a> instance^ ^0"
s[107] = "Rawflickr.TPools^Rawflickr.TPools.html^Implements flickr.groups.pools.*^ ^0"
s[108] = "Rawflickr.TPools.getGroups^Rawflickr.TPools.html#getGroups^Implements flickr.groups.pools.getGroups^    ^0"
s[109] = "Rawflickr.TPools.getPhotos^Rawflickr.TPools.html#getPhotos^Implements flickr.groups.pools.getPhotos^    ^0"
s[110] = "Rawflickr.TPools.getContext^Rawflickr.TPools.html#getContext^Implements flickr.groups.pools.getContext^    ^0"
s[111] = "Rawflickr.TPools.Add^Rawflickr.TPools.html#Add^Implements flickr.groups.pools.add^    ^0"
s[112] = "Rawflickr.TPools.Remove^Rawflickr.TPools.html#Remove^Implements flickr.groups.pools.remove^    ^0"
s[113] = "Rawflickr.TPools.Create^Rawflickr.TPools.html#Create^^    ^0"
s[114] = "Rawflickr.TInterestingness^Rawflickr.TInterestingness.html^Implements flickr.interestingness.*^ ^0"
s[115] = "Rawflickr.TInterestingness.getList^Rawflickr.TInterestingness.html#getList^Implements flickr.interestingness.gtList^    ^0"
s[116] = "Rawflickr.TInterestingness.Create^Rawflickr.TInterestingness.html#Create^^    ^0"
s[117] = "Rawflickr.TPeople^Rawflickr.TPeople.html^Implements flickr.people.*^ ^0"
s[118] = "Rawflickr.TPeople.findByEmail^Rawflickr.TPeople.html#findByEmail^Implements flickr.people.findByEmail^    ^0"
s[119] = "Rawflickr.TPeople.findByUsername^Rawflickr.TPeople.html#findByUsername^Implements flickr.people.findByUsername^    ^0"
s[120] = "Rawflickr.TPeople.getInfo^Rawflickr.TPeople.html#getInfo^Implements flickr.people.getInfo^    ^0"
s[121] = "Rawflickr.TPeople.getPublicGroups^Rawflickr.TPeople.html#getPublicGroups^Implements flickr.people.getPublicGroups^    ^0"
s[122] = "Rawflickr.TPeople.getPublicPhotos^Rawflickr.TPeople.html#getPublicPhotos^Implements flickr.people.getPublicPhotos^    ^0"
s[123] = "Rawflickr.TPeople.getUploadStatus^Rawflickr.TPeople.html#getUploadStatus^Implements flickr.people.getUploadStatus^    ^0"
s[124] = "Rawflickr.TPeople.Create^Rawflickr.TPeople.html#Create^^    ^0"
s[125] = "Rawflickr.TSearchTerms^Rawflickr.TSearchTerms.html^Text, tags and machine tags record, for flickr.photos.search^ ^0"
s[126] = "Rawflickr.TSearchTerms.tags^Rawflickr.TSearchTerms.html#tags^^ ^0"
s[127] = "Rawflickr.TSearchTerms.machineTags^Rawflickr.TSearchTerms.html#machineTags^^ ^0"
s[128] = "Rawflickr.TSearchTerms.tagMode^Rawflickr.TSearchTerms.html#tagMode^^ ^0"
s[129] = "Rawflickr.TSearchTerms.machineTagMode^Rawflickr.TSearchTerms.html#machineTagMode^^ ^0"
s[130] = "Rawflickr.TSearchTerms.text^Rawflickr.TSearchTerms.html#text^^ ^0"
s[131] = "Rawflickr.TBoundBox^Rawflickr.TBoundBox.html^Set of coordinates pairs that determine a geo bounding box^ Make sure to pass values in the intervals [-180..180] for longitud and [-90..90] for latitude, or the whole box will be discarded. ^0"
s[132] = "Rawflickr.TBoundBox.MinLongitude^Rawflickr.TBoundBox.html#MinLongitude^^ ^0"
s[133] = "Rawflickr.TBoundBox.MinLatitude^Rawflickr.TBoundBox.html#MinLatitude^^ ^0"
s[134] = "Rawflickr.TBoundBox.MaxLongitude^Rawflickr.TBoundBox.html#MaxLongitude^^ ^0"
s[135] = "Rawflickr.TBoundBox.MaxLatitude^Rawflickr.TBoundBox.html#MaxLatitude^^ ^0"
s[136] = "Rawflickr.TGeoTerms^Rawflickr.TGeoTerms.html^Geo related search terms^ ^0"
s[137] = "Rawflickr.TGeoTerms.validFields^Rawflickr.TGeoTerms.html#validFields^^ ^0"
s[138] = "Rawflickr.TGeoTerms.bbox^Rawflickr.TGeoTerms.html#bbox^^ ^0"
s[139] = "Rawflickr.TGeoTerms.woeId^Rawflickr.TGeoTerms.html#woeId^^ ^0"
s[140] = "Rawflickr.TGeoTerms.placeId^Rawflickr.TGeoTerms.html#placeId^^ ^0"
s[141] = "Rawflickr.TGeoTerms.accuracy^Rawflickr.TGeoTerms.html#accuracy^^ ^0"
s[142] = "Rawflickr.TContentFilter^Rawflickr.TContentFilter.html^Content related search terms^ Includes content type, safety level, privacy, license, etc. filters ^0"
s[143] = "Rawflickr.TContentFilter.contentType^Rawflickr.TContentFilter.html#contentType^^ ^0"
s[144] = "Rawflickr.TContentFilter.media^Rawflickr.TContentFilter.html#media^^ ^0"
s[145] = "Rawflickr.TContentFilter.license^Rawflickr.TContentFilter.html#license^^ ^0"
s[146] = "Rawflickr.TContentFilter.privacy^Rawflickr.TContentFilter.html#privacy^^ ^0"
s[147] = "Rawflickr.TContentFilter.safety^Rawflickr.TContentFilter.html#safety^^ ^0"
s[148] = "Rawflickr.TPhotoSearchParams^Rawflickr.TPhotoSearchParams.html^Old-style TPhotos.search parameters record^ ^0"
s[149] = "Rawflickr.TPhotoSearchParams.tags^Rawflickr.TPhotoSearchParams.html#tags^^ ^0"
s[150] = "Rawflickr.TPhotoSearchParams.tagMode^Rawflickr.TPhotoSearchParams.html#tagMode^^ ^0"
s[151] = "Rawflickr.TPhotoSearchParams.text^Rawflickr.TPhotoSearchParams.html#text^^ ^0"
s[152] = "Rawflickr.TPhotoSearchParams.Uploaded^Rawflickr.TPhotoSearchParams.html#Uploaded^^ ^0"
s[153] = "Rawflickr.TPhotoSearchParams.Taken^Rawflickr.TPhotoSearchParams.html#Taken^^ ^0"
s[154] = "Rawflickr.TPhotoSearchParams.license^Rawflickr.TPhotoSearchParams.html#license^if -1, don't use; NOTE! that 0 is a valid code^ ^0"
s[155] = "Rawflickr.TPhotoSearchParams.privacy^Rawflickr.TPhotoSearchParams.html#privacy^^ ^0"
s[156] = "Rawflickr.TPhotoSearchParams.media^Rawflickr.TPhotoSearchParams.html#media^^ ^0"
s[157] = "Rawflickr.TPhotos^Rawflickr.TPhotos.html^Implements flickr.photos.*^ ^0"
s[158] = "Rawflickr.TPhotos.Comments^Rawflickr.TPhotos.html#Comments^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TComments.html\">TComments</a> instance^ ^0"
s[159] = "Rawflickr.TPhotos.Geo^Rawflickr.TPhotos.html#Geo^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TGeoData.html\">TGeoData</a> instance^ ^0"
s[160] = "Rawflickr.TPhotos.Licenses^Rawflickr.TPhotos.html#Licenses^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TLicenses.html\">TLicenses</a> instance^ ^0"
s[161] = "Rawflickr.TPhotos.Notes^Rawflickr.TPhotos.html#Notes^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TNotes.html\">TNotes</a> instance^ ^0"
s[162] = "Rawflickr.TPhotos.Transform^Rawflickr.TPhotos.html#Transform^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TTransform.html\">TTransform</a> instance^ ^0"
s[163] = "Rawflickr.TPhotos.Uploader^Rawflickr.TPhotos.html#Uploader^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TUploader.html\">TUploader</a> instance.^ To avoid a name clash (and repetition), this property isn't named as its Flickr counterpart flickr.photos.upload ^0"
s[164] = "Rawflickr.TPhotos.search^Rawflickr.TPhotos.html#search^Implements flickr.photos.search^ You can use this old, limited variant for simple searches, more or less like the normal search in the site.    ^0"
s[165] = "Rawflickr.TPhotos.search^Rawflickr.TPhotos.html#search^Implements flickr.photos.search^ This is the new, fully updated variant using a new set of logically arranged parameters.    ^0"
s[166] = "Rawflickr.TPhotos.getContactsPhotos^Rawflickr.TPhotos.html#getContactsPhotos^Implements (flickr.photos.)getContactsPhotos and getContactsPublicPhotos.^ getContactsPublicPhotos is called if a non-empty userId is passed to the function; otherwise it calls getContactsPhotos, as expected.    ^0"
s[167] = "Rawflickr.TPhotos.getCounts^Rawflickr.TPhotos.html#getCounts^Implements flickr.photos.getCounts^    ^0"
s[168] = "Rawflickr.TPhotos.getNotInSet^Rawflickr.TPhotos.html#getNotInSet^Implements flickr.photos.getNotInSet^    ^0"
s[169] = "Rawflickr.TPhotos.getRecent^Rawflickr.TPhotos.html#getRecent^Implements flickr.photos.getRecent^    ^0"
s[170] = "Rawflickr.TPhotos.getUntagged^Rawflickr.TPhotos.html#getUntagged^Implements flickr.photos.getUntagged^    ^0"
s[171] = "Rawflickr.TPhotos.recentlyUpdated^Rawflickr.TPhotos.html#recentlyUpdated^Implements flickr.photos.recentlyUpdated^    ^0"
s[172] = "Rawflickr.TPhotos.getWithGeoData^Rawflickr.TPhotos.html#getWithGeoData^Implements flickr.photos.getWithGeoData^    ^0"
s[173] = "Rawflickr.TPhotos.getWithoutGeoData^Rawflickr.TPhotos.html#getWithoutGeoData^Implements flickr.photos.getWithoutGeoData^    ^0"
s[174] = "Rawflickr.TPhotos.getContext^Rawflickr.TPhotos.html#getContext^Implements flickr.photos.getContext^    ^0"
s[175] = "Rawflickr.TPhotos.getAllContexts^Rawflickr.TPhotos.html#getAllContexts^Implements flickr.photos.getAllContexts^    ^0"
s[176] = "Rawflickr.TPhotos.getExif^Rawflickr.TPhotos.html#getExif^Implements flickr.photos.getExif^    ^0"
s[177] = "Rawflickr.TPhotos.getInfo^Rawflickr.TPhotos.html#getInfo^Implements flickr.photos.getInfo^    ^0"
s[178] = "Rawflickr.TPhotos.getPerms^Rawflickr.TPhotos.html#getPerms^Implements flickr.photos.getPerms^    ^0"
s[179] = "Rawflickr.TPhotos.getSizes^Rawflickr.TPhotos.html#getSizes^Implements flickr.photos.getSizes^    ^0"
s[180] = "Rawflickr.TPhotos.getFavorites^Rawflickr.TPhotos.html#getFavorites^Implements flickr.photos.getFavorites^    ^0"
s[181] = "Rawflickr.TPhotos.setDates^Rawflickr.TPhotos.html#setDates^Implements flickr.photos.setDates^    ^0"
s[182] = "Rawflickr.TPhotos.setMeta^Rawflickr.TPhotos.html#setMeta^Implements flickr.photos.setMeta^    ^0"
s[183] = "Rawflickr.TPhotos.setPerms^Rawflickr.TPhotos.html#setPerms^Implements flickr.photos.setPerms^    ^0"
s[184] = "Rawflickr.TPhotos.setContentType^Rawflickr.TPhotos.html#setContentType^Implements flickr.photos.setContentType (2008-04-02)^    ^0"
s[185] = "Rawflickr.TPhotos.setSafetyLevel^Rawflickr.TPhotos.html#setSafetyLevel^Implements flickr.photos.setSafetyLevel (2008-04-02)^    ^0"
s[186] = "Rawflickr.TPhotos.setSafetyLevel^Rawflickr.TPhotos.html#setSafetyLevel^Implements flickr.photos.setSafetyLevel (2008-04-02) Use this variant to change the safety level w/out affecting 'hide'^    ^0"
s[187] = "Rawflickr.TPhotos.setTags^Rawflickr.TPhotos.html#setTags^Implements flickr.photos.setTags^    ^0"
s[188] = "Rawflickr.TPhotos.addTags^Rawflickr.TPhotos.html#addTags^Implements flickr.photos.addTags^    ^0"
s[189] = "Rawflickr.TPhotos.removeTag^Rawflickr.TPhotos.html#removeTag^Implements flickr.photos.removeTag^    ^0"
s[190] = "Rawflickr.TPhotos.delete^Rawflickr.TPhotos.html#delete^Implements flickr.photos.delete^    ^0"
s[191] = "Rawflickr.TPhotos.Create^Rawflickr.TPhotos.html#Create^^    ^0"
s[192] = "Rawflickr.TPhotos.Destroy^Rawflickr.TPhotos.html#Destroy^^    ^0"
s[193] = "Rawflickr.TComments^Rawflickr.TComments.html^Implements flickr.photos.comments.* and flickr.photosets.comments.*^ TComments is polimorphic and depends of BaseGroup and BaseIdName to know which group and Id names to use on calls to the Flickr API ^0"
s[194] = "Rawflickr.TComments.getList^Rawflickr.TComments.html#getList^Implements flickr.*.comments.getList ^  entityId corresponds to either photo_id or photoset_id, depending of <a class=\"normal\"  href=\"Rawflickr.TComments.html#BaseIdName\">BaseIdName</a>  ^0"
s[195] = "Rawflickr.TComments.addComment^Rawflickr.TComments.html#addComment^Implements flickr.*.comments.addComment^    ^0"
s[196] = "Rawflickr.TComments.deleteComment^Rawflickr.TComments.html#deleteComment^Implements flickr.*.comments.deleteComment^    ^0"
s[197] = "Rawflickr.TComments.editComment^Rawflickr.TComments.html#editComment^Implements flickr.*.comments.editComment^    ^0"
s[198] = "Rawflickr.TComments.Create^Rawflickr.TComments.html#Create^^    ^0"
s[199] = "Rawflickr.TComments.BaseGroup^Rawflickr.TComments.html#BaseGroup^Name of the base group of calls.^ <b>BaseGroup</b> is used to build the 'method' parameter in the call to the web service; p.e. for flickr.<b>photosets</b>.comments.* you would make:    <p><code>BaseGroup := 'photosets';</code>    <p>Both <a class=\"normal\"  href=\"Rawflickr.TPhotos.html\">TPhotos</a> and <a class=\"normal\"  href=\"Rawflickr.TPhotosets.html\">TPhotosets</a> do this themselves when they create their <code>Comments</code> property; you don't need to do it yourself. ^0"
s[200] = "Rawflickr.TComments.BaseIdName^Rawflickr.TComments.html#BaseIdName^Name of the base ID to use in the call to the web service.^ <b>BaseIdName</b> is used to build the 'xxx_id' parameter for the web service call; p.e. flickr.photos.comments.* uses a parameter called <code>photo_id</code>, so you would do:    <p><code>Comments.BaseIdName := 'photo';</code>.    <p><b>Note</b>: Both <a class=\"normal\"  href=\"Rawflickr.TPhotos.html\">TPhotos</a> and <a class=\"normal\"  href=\"Rawflickr.TPhotosets.html\">TPhotosets</a> do this themselves when they create their <code>Comments</code> property; you don't need to do it yourself. ^0"
s[201] = "Rawflickr.TGeoData^Rawflickr.TGeoData.html^Implements flickr.photos.geo.*^ ^0"
s[202] = "Rawflickr.TGeoData.getPerms^Rawflickr.TGeoData.html#getPerms^Implements flickr.photos.geo.getPerms^    ^0"
s[203] = "Rawflickr.TGeoData.setPerms^Rawflickr.TGeoData.html#setPerms^Implements flickr.photos.geo.setPerms^    ^0"
s[204] = "Rawflickr.TGeoData.getLocation^Rawflickr.TGeoData.html#getLocation^Implements flickr.photos.geo.getLocation^    ^0"
s[205] = "Rawflickr.TGeoData.setLocation^Rawflickr.TGeoData.html#setLocation^Implements flickr.photos.geo.setLocation^    ^0"
s[206] = "Rawflickr.TGeoData.removeLocation^Rawflickr.TGeoData.html#removeLocation^Implements flickr.photos.geo.removeLocation^    ^0"
s[207] = "Rawflickr.TGeoData.Create^Rawflickr.TGeoData.html#Create^^    ^0"
s[208] = "Rawflickr.TLicenses^Rawflickr.TLicenses.html^Implements flickr.photos.licenses.*^ ^0"
s[209] = "Rawflickr.TLicenses.getInfo^Rawflickr.TLicenses.html#getInfo^Implements flickr.photos.licenses.getInfo Since this method returns a static list (or at least one that hasn't changed in years), consider calling it just once and store the data locally; then call it again either once every X months or when you know it has changed.^    ^0"
s[210] = "Rawflickr.TLicenses.setLicense^Rawflickr.TLicenses.html#setLicense^Implements flickr.photos.licenses.setLicense^    ^0"
s[211] = "Rawflickr.TLicenses.Create^Rawflickr.TLicenses.html#Create^^    ^0"
s[212] = "Rawflickr.TNoteRecord^Rawflickr.TNoteRecord.html^Used to pass note info to methods of <a class=\"normal\"  href=\"Rawflickr.TNotes.html\">TNotes</a>^ ^0"
s[213] = "Rawflickr.TNoteRecord.Id^Rawflickr.TNoteRecord.html#Id^Note's Flickr Id^ ^0"
s[214] = "Rawflickr.TNoteRecord.Left^Rawflickr.TNoteRecord.html#Left^Note's bounding rectangle^ ^0"
s[215] = "Rawflickr.TNoteRecord.Top^Rawflickr.TNoteRecord.html#Top^Note's bounding rectangle^ ^0"
s[216] = "Rawflickr.TNoteRecord.Width^Rawflickr.TNoteRecord.html#Width^Note's bounding rectangle^ ^0"
s[217] = "Rawflickr.TNoteRecord.Height^Rawflickr.TNoteRecord.html#Height^Note's bounding rectangle^ ^0"
s[218] = "Rawflickr.TNoteRecord.Text^Rawflickr.TNoteRecord.html#Text^Note's content^ ^0"
s[219] = "Rawflickr.TNotes^Rawflickr.TNotes.html^Implements flickr.photos.notes.*^ ^0"
s[220] = "Rawflickr.TNotes.Add^Rawflickr.TNotes.html#Add^Implements flickr.photos.notes.add^    ^0"
s[221] = "Rawflickr.TNotes.Delete^Rawflickr.TNotes.html#Delete^Implements flickr.photos.notes.delete^    ^0"
s[222] = "Rawflickr.TNotes.Edit^Rawflickr.TNotes.html#Edit^Implements flickr.photos.notes.edit^    ^0"
s[223] = "Rawflickr.TNotes.Create^Rawflickr.TNotes.html#Create^^    ^0"
s[224] = "Rawflickr.TTransform^Rawflickr.TTransform.html^Implements flickr.photos.transform.*^ ^0"
s[225] = "Rawflickr.TTransform.Rotate^Rawflickr.TTransform.html#Rotate^Implements flickr.photos.transform.rotate^    ^0"
s[226] = "Rawflickr.TTransform.Create^Rawflickr.TTransform.html#Create^^    ^0"
s[227] = "Rawflickr.EFlickrUploadError^Rawflickr.EFlickrUploadError.html^<a class=\"normal\"  href=\"Rawflickr.EFlickrError.html\">EFlickrError</a> descendant for upload errors^ ^0"
s[228] = "Rawflickr.TUploader^Rawflickr.TUploader.html^Implements flickr.photos.upload.* and the Photo Upload/Replace API^ ^0"
s[229] = "Rawflickr.TUploader.GetUploadRequest^Rawflickr.TUploader.html#GetUploadRequest^Builds a proper FRequest to be used with the Upload API.^    ^0"
s[230] = "Rawflickr.TUploader.GetReplaceRequest^Rawflickr.TUploader.html#GetReplaceRequest^Builds a proper FRequest to be used with the Replace API.^    ^0"
s[231] = "Rawflickr.TUploader.checkTickets^Rawflickr.TUploader.html#checkTickets^Implements flickr.photos.upload.checkTickets.^ This variant takes a comma-delimited list of ticket ids.    ^0"
s[232] = "Rawflickr.TUploader.checkTickets^Rawflickr.TUploader.html#checkTickets^Implements flickr.photos.upload.checkTickets.^ This variant takes an array of single ticket ids.    ^0"
s[233] = "Rawflickr.TUploader.Upload^Rawflickr.TUploader.html#Upload^Uploads a photo (u other media) to the web service.^ The <code>Stream</code> parameter of this function has preference over <code>Filename</code>, meaning that if you pass a valid stream to the function, <code>Filename</code> won't be validated and will be passed as such. If <code>Stream</code> is <code>Nil</code>, however, the local file pointed to by <code>Filename</code> must exist and be readable, since it will be opened as a <code>TFileStream</code> and sent; i.e. this two code snippets are equivalent: </p>    <pre class=\"longcode\">       <span class=\"pascal_comment\">// using Stream:</span>       AFileName := <span class=\"pascal_string\">'\\My Pictures\\incredible.jpg'</span>;       fs := TFileStream.Create(AFileName, fmOpenRead <span class=\"pascal_keyword\">or</span> fmShareDenyWrite);       AFileName := <span class=\"pascal_string\">'whatever you want'</span>; <span class=\"pascal_comment\">// @italic(it doesn't matter at all...)</span>       response := Flickr.Photos.Uploader.Upload(fs, AFileName, <span class=\"pascal_string\">'nice photo'</span>);         <span class=\"pascal_comment\">// using just filename</span>       AFileName := <span class=\"pascal_string\">'\\My Pictures\\incredible.jpg'</span>;       response := Flickr.Photos.Uploader.Upload(<span class=\"pascal_keyword\">nil</span>, AFileName, <span class=\"pascal_string\">'nice photo'</span>);      </pre>    <p>    Stream TStream which contains the graphic data to upload; if this parameter is <code>Nil</code>, <code>Filename</code> will be interpreted as the name of a local file to upload. Filename Name of the file to send on the request; if <code>Stream</code> is <code>Nil</code>, the file pointed to by <code>Filename</code> will be opened as a <code>TFileStream</code> and its content sent on the request as the photograph data; otherwise the name will be sent as the filename corresponding to <code>Stream</code>.  ^0"
s[234] = "Rawflickr.TUploader.Replace^Rawflickr.TUploader.html#Replace^Replaces an already uploaded photo for a new one.^     ^0"
s[235] = "Rawflickr.TUploader.Create^Rawflickr.TUploader.html#Create^^    ^0"
s[236] = "Rawflickr.TPhotosets^Rawflickr.TPhotosets.html^Implements flickr.photosets.*^ ^0"
s[237] = "Rawflickr.TPhotosets.getList^Rawflickr.TPhotosets.html#getList^Implements flickr.photosets.*^    ^0"
s[238] = "Rawflickr.TPhotosets.orderSets^Rawflickr.TPhotosets.html#orderSets^Implements flickr.photosets.*^    ^0"
s[239] = "Rawflickr.TPhotosets.createSet^Rawflickr.TPhotosets.html#createSet^Implements flickr.photosets.create.^ Renamed to <code>createSet</code> to avoid a name clash with the constructor    ^0"
s[240] = "Rawflickr.TPhotosets.deleteSet^Rawflickr.TPhotosets.html#deleteSet^Implements flickr.photosets.delete.^ Renamed to <code>deleteSet</code> for consistency    ^0"
s[241] = "Rawflickr.TPhotosets.getInfo^Rawflickr.TPhotosets.html#getInfo^Implements flickr.photosets.getInfo^    ^0"
s[242] = "Rawflickr.TPhotosets.editMeta^Rawflickr.TPhotosets.html#editMeta^Implements flickr.photosets.editMeta^    ^0"
s[243] = "Rawflickr.TPhotosets.getPhotos^Rawflickr.TPhotosets.html#getPhotos^Implements flickr.photosets.getPhotos^    ^0"
s[244] = "Rawflickr.TPhotosets.editPhotos^Rawflickr.TPhotosets.html#editPhotos^Implements flickr.photosets.editPhotos^    ^0"
s[245] = "Rawflickr.TPhotosets.addPhoto^Rawflickr.TPhotosets.html#addPhoto^Implements flickr.photosets.addPhoto^    ^0"
s[246] = "Rawflickr.TPhotosets.removePhoto^Rawflickr.TPhotosets.html#removePhoto^Implements flickr.photosets.removePhoto^    ^0"
s[247] = "Rawflickr.TPhotosets.getContext^Rawflickr.TPhotosets.html#getContext^Implements flickr.photosets.getContext^    ^0"
s[248] = "Rawflickr.TPhotosets.Create^Rawflickr.TPhotosets.html#Create^^    ^0"
s[249] = "Rawflickr.TPhotosets.Comments^Rawflickr.TPhotosets.html#Comments^^ ^0"
s[250] = "Rawflickr.TPlaces^Rawflickr.TPlaces.html^Implements flickr.places.*^ ^0"
s[251] = "Rawflickr.TPlaces.find^Rawflickr.TPlaces.html#find^Implements flickr.places.find^    ^0"
s[252] = "Rawflickr.TPlaces.findByLatLon^Rawflickr.TPlaces.html#findByLatLon^Implements flickr.places.findByLatLon^    ^0"
s[253] = "Rawflickr.TPlaces.resolvePlaceId^Rawflickr.TPlaces.html#resolvePlaceId^Implements flickr.places.resolvePlaceId^    ^0"
s[254] = "Rawflickr.TPlaces.resolvePlaceURL^Rawflickr.TPlaces.html#resolvePlaceURL^Implements flickr.places.resolvePlaceURL^    ^0"
s[255] = "Rawflickr.TPlaces.Create^Rawflickr.TPlaces.html#Create^Class constructor, for completeness sake^    ^0"
s[256] = "Rawflickr.TPrefs^Rawflickr.TPrefs.html^Implements flickr.prefs^ ^0"
s[257] = "Rawflickr.TPrefs.getContentType^Rawflickr.TPrefs.html#getContentType^Implements flickr.prefs.getContentType *^    ^0"
s[258] = "Rawflickr.TPrefs.getGeoPerms^Rawflickr.TPrefs.html#getGeoPerms^Implements flickr.prefs.getGeoPerms *^    ^0"
s[259] = "Rawflickr.TPrefs.getHidden^Rawflickr.TPrefs.html#getHidden^Implements flickr.prefs.getHidden *^    ^0"
s[260] = "Rawflickr.TPrefs.getPrivacy^Rawflickr.TPrefs.html#getPrivacy^Implements flickr.prefs.getPrivacy *^    ^0"
s[261] = "Rawflickr.TPrefs.getSafetyLevel^Rawflickr.TPrefs.html#getSafetyLevel^Implements flickr.prefs.getSafetyLevel *^    ^0"
s[262] = "Rawflickr.TPrefs.Create^Rawflickr.TPrefs.html#Create^Class constructor, for completeness sake^    ^0"
s[263] = "Rawflickr.TReflection^Rawflickr.TReflection.html^Implements flickr.reflection.*^ ^0"
s[264] = "Rawflickr.TReflection.getMethodInfo^Rawflickr.TReflection.html#getMethodInfo^Implements flickr.reflection.getMethodInfo.^   Name should be called <code>methodName</code> but I renamed it to avoid a clash with TObjects.methodName  ^0"
s[265] = "Rawflickr.TReflection.getMethods^Rawflickr.TReflection.html#getMethods^Implements flickr.reflection.getMethods^    ^0"
s[266] = "Rawflickr.TReflection.Create^Rawflickr.TReflection.html#Create^^    ^0"
s[267] = "Rawflickr.TTags^Rawflickr.TTags.html^Implements flickr.tags.*^ ^0"
s[268] = "Rawflickr.TTags.getHotList^Rawflickr.TTags.html#getHotList^Implements flickr.tags.getHotList^    ^0"
s[269] = "Rawflickr.TTags.getListPhoto^Rawflickr.TTags.html#getListPhoto^Implements flickr.tags.getListPhoto^    ^0"
s[270] = "Rawflickr.TTags.getListUser^Rawflickr.TTags.html#getListUser^Implements flickr.tags.getListUser^    ^0"
s[271] = "Rawflickr.TTags.getListUserPopular^Rawflickr.TTags.html#getListUserPopular^Implements flickr.tags.getListUserPopular^    ^0"
s[272] = "Rawflickr.TTags.getListUserRaw^Rawflickr.TTags.html#getListUserRaw^Implements flickr.tags.getListUserRaw (2008/03/31)^    ^0"
s[273] = "Rawflickr.TTags.getRelated^Rawflickr.TTags.html#getRelated^Implements flickr.tags.getRelated^    ^0"
s[274] = "Rawflickr.TTags.Create^Rawflickr.TTags.html#Create^^    ^0"
s[275] = "Rawflickr.TTest^Rawflickr.TTest.html^Implements flickr.test.*^ ^0"
s[276] = "Rawflickr.TTest.echo^Rawflickr.TTest.html#echo^Implements flickr.test.echo.^ This variant takes an array of INI strings (&quot;name=value&quot; pairs)    ^0"
s[277] = "Rawflickr.TTest.echo^Rawflickr.TTest.html#echo^Implements flickr.test.echo.^ This variant takes a TStrings object; it should contain INI strings (i.e. &quot;name=value&quot; pairs)    ^0"
s[278] = "Rawflickr.TTest.login^Rawflickr.TTest.html#login^Implements flickr.test.login^    ^0"
s[279] = "Rawflickr.TTest.null^Rawflickr.TTest.html#null^Implements flickr.test.null^    ^0"
s[280] = "Rawflickr.TTest.GenericCall^Rawflickr.TTest.html#GenericCall^Generic call for methods testing.^ While it isn't part of the Flickr API, in can be useful as a debugging help; to bypass, if wanted, all the other classes or to call a web API method that is yet unimplemented.    ^0"
s[281] = "Rawflickr.TTest.Create^Rawflickr.TTest.html#Create^^    ^0"
s[282] = "Rawflickr.TUrls^Rawflickr.TUrls.html^@abstractImplements flickr.urls.*) All the calls in this class return static info, so they are good candidates for caching; you should cache, at least, the more frequently used info p.e.^ id - URI pairs of the user's groups, user pages URLs, etc. ^0"
s[283] = "Rawflickr.TUrls.getGroup^Rawflickr.TUrls.html#getGroup^Implements flickr.urls.getGroup^    ^0"
s[284] = "Rawflickr.TUrls.getUserPhotos^Rawflickr.TUrls.html#getUserPhotos^Implements flickr.urls.getUserPhotos^    ^0"
s[285] = "Rawflickr.TUrls.getUserProfile^Rawflickr.TUrls.html#getUserProfile^Implements flickr.urls.getUserProfile^    ^0"
s[286] = "Rawflickr.TUrls.lookupGroup^Rawflickr.TUrls.html#lookupGroup^Implements flickr.urls.lookupGroup^    ^0"
s[287] = "Rawflickr.TUrls.lookupUser^Rawflickr.TUrls.html#lookupUser^Implements flickr.urls.lookupUser^    ^0"
s[288] = "Rawflickr.TUrls.Create^Rawflickr.TUrls.html#Create^^    ^0"
s[289] = "Rawflickr.TFlickrEx^Rawflickr.TFlickrEx.html^Extended web service class^ This descendant of <a class=\"normal\"  href=\"Rawflickr.TFlickr.html\">TFlickr</a> introduces properties designed to provide access to Flickr API methods from a single object, as well as a single-call authorization process. ^0"
s[290] = "Rawflickr.TFlickrEx.Authorize^Rawflickr.TFlickrEx.html#Authorize^Performs a desktop authorization process.^    ^0"
s[291] = "Rawflickr.TFlickrEx.Create^Rawflickr.TFlickrEx.html#Create^Class constructor.^ For Flickr, you must have a valid API key and secret. For 23 you can use any arbitrary key (though they recommend it to be the application name) and AFAIK you don't need any &quot;Secret&quot;, given that their authenticated calls are different.    ^0"
s[292] = "Rawflickr.TFlickrEx.Destroy^Rawflickr.TFlickrEx.html#Destroy^^    ^0"
s[293] = "Rawflickr.TFlickrEx.Auth^Rawflickr.TFlickrEx.html#Auth^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TAuth.html\">TAuth</a> instance.^ ^0"
s[294] = "Rawflickr.TFlickrEx.Activity^Rawflickr.TFlickrEx.html#Activity^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TActivity.html\">TActivity</a> instance.^ ^0"
s[295] = "Rawflickr.TFlickrEx.Blogs^Rawflickr.TFlickrEx.html#Blogs^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TBlogs.html\">TBlogs</a> instance.^ ^0"
s[296] = "Rawflickr.TFlickrEx.Contacts^Rawflickr.TFlickrEx.html#Contacts^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TContacts.html\">TContacts</a> instance.^ ^0"
s[297] = "Rawflickr.TFlickrEx.Favorites^Rawflickr.TFlickrEx.html#Favorites^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TFavorites.html\">TFavorites</a> instance.^ ^0"
s[298] = "Rawflickr.TFlickrEx.Groups^Rawflickr.TFlickrEx.html#Groups^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TGroups.html\">TGroups</a> instance...^ and, through it, to a <a class=\"normal\"  href=\"Rawflickr.TPools.html\">TPools</a> instance. ^0"
s[299] = "Rawflickr.TFlickrEx.Interestingness^Rawflickr.TFlickrEx.html#Interestingness^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TInterestingness.html\">TInterestingness</a> instance.^ ^0"
s[300] = "Rawflickr.TFlickrEx.People^Rawflickr.TFlickrEx.html#People^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPeople.html\">TPeople</a> instance.^ ^0"
s[301] = "Rawflickr.TFlickrEx.Photos^Rawflickr.TFlickrEx.html#Photos^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPhotos.html\">TPhotos</a> instance...^ and, through it, to <a class=\"normal\"  href=\"Rawflickr.TComments.html\">TComments</a>, <a class=\"normal\"  href=\"Rawflickr.TGeoData.html\">TGeoData</a>, <a class=\"normal\"  href=\"Rawflickr.TLicenses.html\">TLicenses</a>, <a class=\"normal\"  href=\"Rawflickr.TNotes.html\">TNotes</a>, <a class=\"normal\"  href=\"Rawflickr.TTransform.html\">TTransform</a> and <a class=\"normal\"  href=\"Rawflickr.TUploader.html\">TUploader</a> instances. ^0"
s[302] = "Rawflickr.TFlickrEx.Photosets^Rawflickr.TFlickrEx.html#Photosets^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPhotosets.html\">TPhotosets</a> instance...^ and, through it, to a <a class=\"normal\"  href=\"Rawflickr.TComments.html\">TComments</a> instance. ^0"
s[303] = "Rawflickr.TFlickrEx.Places^Rawflickr.TFlickrEx.html#Places^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPlaces.html\">TPlaces</a> instance.^ ^0"
s[304] = "Rawflickr.TFlickrEx.Prefs^Rawflickr.TFlickrEx.html#Prefs^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TPrefs.html\">TPrefs</a> instance.^ ^0"
s[305] = "Rawflickr.TFlickrEx.Reflection^Rawflickr.TFlickrEx.html#Reflection^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TReflection.html\">TReflection</a> instance.^ ^0"
s[306] = "Rawflickr.TFlickrEx.Tags^Rawflickr.TFlickrEx.html#Tags^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TTags.html\">TTags</a> instance.^ ^0"
s[307] = "Rawflickr.TFlickrEx.Test^Rawflickr.TFlickrEx.html#Test^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TTest.html\">TTest</a> instance.^ ^0"
s[308] = "Rawflickr.TFlickrEx.Urls^Rawflickr.TFlickrEx.html#Urls^Provides access to a <a class=\"normal\"  href=\"Rawflickr.TUrls.html\">TUrls</a> instance.^ ^0"
s[309] = "Rawflickr.TFlickrEx.SignAll^Rawflickr.TFlickrEx.html#SignAll^Sets <code>SignAll</code> to <code>True</code> or <code>False</code> coordinately for all <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html\">TRESTApi</a> descendant members of TFlickr.^ ^0"
s[310] = "Rawflickr.TFlickrEx.OnAuthorize^Rawflickr.TFlickrEx.html#OnAuthorize^End user participation needed.^ This event is called from <a class=\"normal\"  href=\"Rawflickr.TFlickrEx.html#Authorize\">Authorize</a> if the authentication process reachs the point in which it needs the participation of the user i.e. when we need to navigate to Flickr (or 23) prior to request a token. For details see <a  target=\"_parent\" href=\"http://www.flickr.com/services/api/misc.userauth.html\">http://www.flickr.com/services/api/misc.userauth.html</a> Though the library offers a default event handler for this task, don't rely on it; being non-portable in nature, it'll probably dissapear in one of the next releases. ^0"
s[311] = "Rawflickr.Version^Rawflickr.html#Version^Version of the library^ Contrary to what is considered &quot;standard&quot;, version &quot;100&quot; (1.0.0) is both &quot;development&quot; and &quot;stable&quot; (and beta, gamma, etc. ;-)) Should you need it, compare the lastmod date to know if you have the latest. ^0"
s[312] = "Rawflickr.ServiceNames^Rawflickr.html#ServiceNames^Services' names referred to by <a class=\"normal\"  href=\"Rawflickr.TFlickr.html#Service\">TFlickr.Service</a>^ Do note that due to the change of the type of <a class=\"normal\"  href=\"Rawflickr.TFlickr.html#Service\">TFlickr.Service</a>, you must now index this array with a <a class=\"normal\"  href=\"Rawflickr.html#TServiceType\">TServiceType</a> variable. ^0"
s[313] = "Rawflickr.KnownBaseURI^Rawflickr.html#KnownBaseURI^Base URI of the known services API endpoints.^ These URIs are used to set the default <a class=\"normal\"  href=\"Rawflickr.TWebService.html#BaseURI\">TWebService.BaseURI</a> after changing <a class=\"normal\"  href=\"Rawflickr.TWebService.html#ServiceType\">TWebService.ServiceType</a>. ^0"
s[314] = "Rawflickr.EmptyID^Rawflickr.html#EmptyID^Semantic 'no id'^ ^0"
s[315] = "Rawflickr.AnyId^Rawflickr.html#AnyId^Semantic 'anyone' id^ ^0"
s[316] = "Rawflickr.SelfId^Rawflickr.html#SelfId^Semantic 'owner' id^ ^0"
s[317] = "Rawflickr.DefPageSet^Rawflickr.html#DefPageSet^Default <a class=\"normal\"  href=\"Rawflickr.TPageSet.html\">TPageSet</a>.^ Means &quot;let Flickr decide how many items to return.&quot; For 'normal' photolists it'll be 100, but other lists return by default as many as 500 (p.e. flickr.photosets.getPhotos) ^0"
s[318] = "Rawflickr.EmptyXtra^Rawflickr.html#EmptyXtra^Default <a class=\"normal\"  href=\"Rawflickr.TXtraParams.html\">TXtraParams</a>^ No extra options passed; default pagination. ^0"
s[319] = "Rawflickr.AllXtras^Rawflickr.html#AllXtras^All known 'extras' values.^ Up to date as of 2008-04-09 ^0"
s[320] = "Rawflickr.FullXtras^Rawflickr.html#FullXtras^<a class=\"normal\"  href=\"Rawflickr.TXtraParams.html\">TXtraParams</a> set to retrieve the richest response available^ ^0"
s[321] = "Rawflickr.TagModes^Rawflickr.html#TagModes^<a class=\"normal\"  href=\"Rawflickr.html#TTagSearchMode\">TTagSearchMode</a> lookup strings^ ^0"
s[322] = "Rawflickr.MediaTypes^Rawflickr.html#MediaTypes^<a class=\"normal\"  href=\"Rawflickr.html#TMediaType\">TMediaType</a> lookup strings^ ^0"
s[323] = "Rawflickr.SortOrderStr^Rawflickr.html#SortOrderStr^<a class=\"normal\"  href=\"Rawflickr.html#TSortOrder\">TSortOrder</a> lookup strings^ ^0"
s[324] = "Rawflickr.dgExact^Rawflickr.html#dgExact^<a class=\"normal\"  href=\"Rawflickr.html#TDateGranularity\">TDateGranularity</a>: Exact date^ ^0"
s[325] = "Rawflickr.dgMonth^Rawflickr.html#dgMonth^<a class=\"normal\"  href=\"Rawflickr.html#TDateGranularity\">TDateGranularity</a>: Known month/year, e.g.^ &quot;August, 1997&quot; ^0"
s[326] = "Rawflickr.dgYear^Rawflickr.html#dgYear^<a class=\"normal\"  href=\"Rawflickr.html#TDateGranularity\">TDateGranularity</a>: Known year; e.g.^ &quot;sometime in 2004&quot; ^0"
s[327] = "Rawflickr.sFBadResponse^Rawflickr.html#sFBadResponse^^ ^0"
s[328] = "Rawflickr.BuildXtraParams^Rawflickr.html#BuildXtraParams^Build a TXtraParams record.^ Use this function to build a <a class=\"normal\"  href=\"Rawflickr.TXtraParams.html\">TXtraParams</a> record suitable for most of the API calls that return lists. <b>Note</b> that <code>foo := BuildXtraParams</code> will make <code>foo</code> equal to the constant <a class=\"normal\"  href=\"Rawflickr.html#EmptyXtra\">EmptyXtra</a>    ^0"
s[329] = "Rawflickr.BuildSearchParams^Rawflickr.html#BuildSearchParams^Builds a TPhotoSearchParams record.^ Use this function to build a <a class=\"normal\"  href=\"Rawflickr.TPhotoSearchParams.html\">TPhotoSearchParams</a> record.    ^0"
s[330] = "Rawflickr.XMLToStrings^Rawflickr.html#XMLToStrings^Simple XML reponse parser.^ Converts the XML response to a kind of INI format. Note that this function returns an object that you must free once you're done with it. For an example of how this can be done see the implementation of <a class=\"normal\"  href=\"Rawflickr.TRESTApi.html#ParseResponse\">TRESTApi.ParseResponse</a>.    ^0"
s[331] = "Rawflickr.TServiceType^Rawflickr.html#TServiceType^Type of <a class=\"normal\"  href=\"Rawflickr.TWebService.html#ServiceType\">TWebService.ServiceType</a>^   stFlickr    st23    stOther   ^0"
s[332] = "Rawflickr.TEndpoints^Rawflickr.html#TEndpoints^Type used to index the array of endpoint's URLs.^   epBaseRPC    epBaseSOAP    epBaseREST    epUpload    epReplace    epAuth    epLogout    epMethod   ^0"
s[333] = "Rawflickr.TSignOption^Rawflickr.html#TSignOption^Enumeration used in TRESTApi constructor.^  sgnRequired    sgnAlways   ^0"
s[334] = "Rawflickr.EFlickrErrorClass^Rawflickr.html#EFlickrErrorClass^Class reference to <a class=\"normal\"  href=\"Rawflickr.EFlickrError.html\">EFlickrError</a> and descendants.^ ^0"
s[335] = "Rawflickr.TPrivacyFilter^Rawflickr.html#TPrivacyFilter^^  pfNone    pfPublic    pfFriends    pfFamily    pfFriendsFamily    pfPrivate   ^0"
s[336] = "Rawflickr.TTagSearchMode^Rawflickr.html#TTagSearchMode^Tags and machine tags search modes.^   tmAny    tmAll    tmOther   ^0"
s[337] = "Rawflickr.TGeoAccuracy^Rawflickr.html#TGeoAccuracy^Accuracy level of location information^ The range 1..16 is Flickr's current range, meaning: </p>    <ul class=\"paragraph_spacing\">    <li><p>World level is 1</p></li>    <li><p>Country is &tilde;3</p></li>    <li><p>Region is &tilde;6</p></li>    <li><p>City is &tilde;11</p></li>    <li><p>Street is &tilde;16</p></li>  </ul>    <p> while &quot;0&quot; (zero) represents an &quot;unspecified&quot; value ^0"
s[338] = "Rawflickr.TValidGeoFields^Rawflickr.html#TValidGeoFields^^  gfNone    gfBbox    gfPlaces   ^0"
s[339] = "Rawflickr.TContentType^Rawflickr.html#TContentType^Content types^  ctNone    ctPhoto    ctScreen    ctOther    ctPhotoScreen    ctScreenOther    ctPhotoOther    ctAll   ^0"
s[340] = "Rawflickr.TMediaType^Rawflickr.html#TMediaType^Media types^ </p>    <ul class=\"paragraph_spacing\">    <li><p>mediaDefault, use Flickr's default.</p></li>    <li><p>mediaStill, for the traditional media: photos, drawings, etc.</p></li>    <li><p>mediaMotion, for the &quot;video&quot; media.</p></li>    <li><p>mediaAll, for both.</p></li>  </ul>    <p>  mediaDefault    mediaStill    mediaMotion    mediaAll   ^0"
s[341] = "Rawflickr.TSafetyLevel^Rawflickr.html#TSafetyLevel^Safety level for any type of content^  slIgnore    slSafe    slModerate    slRestricted   ^0"
s[342] = "Rawflickr.TSortOrder^Rawflickr.html#TSortOrder^Type of the &quot;sort&quot; parameter passed to methods that return a list.^   soDefault    soPostedAsc    soPostedDesc    soTakenAsc    soTakenDesc    soInterestAsc    soInterestDesc    soRelevance   ^0"
s[343] = "Rawflickr.TDateKind^Rawflickr.html#TDateKind^Kind of date/time requested or returned.^  dkTaken    dkPosted    dkUpdated   ^0"
s[344] = "Rawflickr.TDateGranularity^Rawflickr.html#TDateGranularity^Accuracy level of a date/time.^ At the date of this writing there are only three valid values, (see the constants dgExact, dgMonth and dgYear); but according to Flickr docs (see <a  target=\"_parent\" href=\"http://www.flickr.com/services/api/misc.dates.html\">http://www.flickr.com/services/api/misc.dates.html</a> <blockquote><em>In the future, additional granularities may be added,     so for future compatability you might want to build you application to     accept any number between 0 and 10 for the granularity.</em><br></blockquote> ^0"
s[345] = "Rawflickr.TVisible^Rawflickr.html#TVisible^^  toPublic    toFriends    toFamily    toPrivate   ^0"
s[346] = "Rawflickr.TVisibility^Rawflickr.html#TVisibility^^ ^0"
s[347] = "Rawflickr.TPermission^Rawflickr.html#TPermission^^  permOwner    permFriendsFamily    permContacts    permPublic   ^0"
s[348] = "Rawflickr.TPermissions^Rawflickr.html#TPermissions^^ ^0"
s[349] = "Rawflickr.TLocPrivacy^Rawflickr.html#TLocPrivacy^^  lpPublic    lpContacts    lpFriends    lpFamily    lpPrivate   ^0"
s[350] = "Rawflickr.TViewPerm^Rawflickr.html#TViewPerm^^ ^0"
s[351] = "Rawflickr.TAuthReason^Rawflickr.html#TAuthReason^Reason why a new authentication is needed^  arNoToken    arLevelPromotion    arInvalidLoginOrToken    arOther   ^0"
s[352] = "Rawflickr.TAuthorizeEvent^Rawflickr.html#TAuthorizeEvent^Type of the <a class=\"normal\"  href=\"Rawflickr.TFlickrEx.html#OnAuthorize\">TFlickrEx.OnAuthorize</a> event.^    ^0"
s[353] = "rfNetHlp^rfNetHlp.html^Internet Helper for Rawflickr^       <p>This unit serves to isolates the main rawflickr.pas from the network lybrary used to actually access the Internet, the rationale being that thus the task of porting Rawflickr to other environments is eased.    <p>Later versions may be implemented as an abstract class or a plugable architecture, but for now it's just a set of function calls extracted from my Network Extensions Library.    <p><b>Credits:</b> </p>    <ul class=\"paragraph_spacing\">    <li><p>Internet Direct (Indy) version 9.0.18, <a  target=\"_parent\" href=\"http://www.indyproject.org/\">http://www.indyproject.org/</a></p></li>    <li><p>Synapse Release 36, <a  target=\"_parent\" href=\"http://www.ararat.cz/synapse/\">http://www.ararat.cz/synapse/</a></p></li>  </ul>    <p> <b>Important Note</b>: Synapse support has been temporarily taken away; it'll be reintroduced in one of the next releseases. If you can't wait, feel free to introduce it yourself and pass it back to the source tree (contact me for details) Luis Caballero <luiscamar@users.sourceforge.net>  ^0"
s[354] = "rfNetHlp.EDownloadError^rfNetHlp.EDownloadError.html^^ ^0"
s[355] = "rfNetHlp.LaunchBrowser^rfNetHlp.html#LaunchBrowser^Launchs the default browser and navigates to an URL.^ This call is used by <a class=\"normal\"  href=\"Rawflickr.html\">rawflickr</a>, during the authorization process, to navigate to the &quot;login link&quot;.    <p>The actual implementation depends of Win32's URL Moniker    ^0"
s[356] = "rfNetHlp.DownloadURL^rfNetHlp.html#DownloadURL^Download a web document into a stream via HTTP^        url URI of the file to retrieve. DestStream Destination stream. Params Parameters to pass to the remote host. Method HTTP method to use for the request. <code>True</code> on completion or <code>False</code> on error if no exception is raised. Exception The class of the exception depends of the underlying HTTP or streams implementations.^0"
s[357] = "rfNetHlp.DownloadURL^rfNetHlp.html#DownloadURL^Download a remote file to a local one via HTTP^        url URI of the file to retrieve. DestFileName Name of the destination local file. Params Parameters to pass to the remote host. Method HTTP method to use for the request. <code>True</code> on completion or <code>False</code> on error if no exception is raised. Exception The class of the exception depends of the underlying HTTP, streams or filesystem implementations.^0"
s[358] = "rfNetHlp.WebMethodCall^rfNetHlp.html#WebMethodCall^Calls an HTTP service&ndash;url-encoded params^ This set of functions work as those of the <a class=\"normal\"  href=\"rfNetHlp.html#DownloadURL\">DownloadURL</a> group but return a string with the server's response, thus making it easier to feed it to a parser.    <p>This variant executes the HTTP <code>Method</code> passing the parameters <code>Params</code> in url-encoded form.    ^0"
s[359] = "rfNetHlp.WebMethodCall^rfNetHlp.html#WebMethodCall^Calls an HTTP service&ndash;w/out params^ This set of functions work as those of the <a class=\"normal\"  href=\"rfNetHlp.html#DownloadURL\">DownloadURL</a> group but return a string with the server's response, thus making easier to feed it to a parser.    <p>This variant executes the HTTP <code>Method</code> passing no parameters, unless already encoded by the user in <code>BaseURL</code>.    ^0"
s[360] = "rfNetHlp.WebMethodCall^rfNetHlp.html#WebMethodCall^Calls an HTTP service&ndash;Multipart/Form-Data^ This set of functions work as those of the <a class=\"normal\"  href=\"rfNetHlp.html#DownloadURL\">DownloadURL</a> group but return a string with the server's response, thus making easier to feed it to a parser.    <p>This variant pass the HTTP Post parameters as a Multipart/Form-Data stream; it's used, generally, to upload a file to a web server.    ^0"
s[361] = "rfNetHlp.TReqMethod^rfNetHlp.html#TReqMethod^Valid HTTP request methods^  rqGet    rqPost    rqPut    rqHead    rqOther   ^0"
s[362] = "StringsExt^StringsExt.html^String Array Objects for Delphi^       <p>Lightweight replacement of TStrings &amp; TStringsList and miscelaneous string handling routines (rawflickr release)    <p>Copyright 1998, 2006 by Luis Caballero Martínez. All Rights Reserved Released under a Mozilla Public License 1.1 Luis Caballero Mnez. <sillyluis@yahoo.es>  ^0"
s[363] = "StringsExt.TStringArray^StringsExt.TStringArray.html^This class implements methods and functions to acccess easily a dynamic array of Strings^ You can think of it as the poor-man's version of <code>TStrings</code> with just the Strings&ndash;no <code>Objects</code>, no <code>StringsAdapter</code>, etc. It isn't even thread-safe, so be warned. ^0"
s[364] = "StringsExt.TStringArray.UpdateCount^StringsExt.TStringArray.html#UpdateCount^^    ^0"
s[365] = "StringsExt.TStringArray.Grow^StringsExt.TStringArray.html#Grow^^    ^0"
s[366] = "StringsExt.TStringArray.GetStr^StringsExt.TStringArray.html#GetStr^^    ^0"
s[367] = "StringsExt.TStringArray.SetStr^StringsExt.TStringArray.html#SetStr^^    ^0"
s[368] = "StringsExt.TStringArray.GetCount^StringsExt.TStringArray.html#GetCount^^    ^0"
s[369] = "StringsExt.TStringArray.GetName^StringsExt.TStringArray.html#GetName^^    ^0"
s[370] = "StringsExt.TStringArray.GetValue^StringsExt.TStringArray.html#GetValue^^    ^0"
s[371] = "StringsExt.TStringArray.SetValue^StringsExt.TStringArray.html#SetValue^^    ^0"
s[372] = "StringsExt.TStringArray.ParseArray^StringsExt.TStringArray.html#ParseArray^^    ^0"
s[373] = "StringsExt.TStringArray.GetText^StringsExt.TStringArray.html#GetText^^    ^0"
s[374] = "StringsExt.TStringArray.SetText^StringsExt.TStringArray.html#SetText^^    ^0"
s[375] = "StringsExt.TStringArray.Create^StringsExt.TStringArray.html#Create^^    ^0"
s[376] = "StringsExt.TStringArray.Create^StringsExt.TStringArray.html#Create^^    ^0"
s[377] = "StringsExt.TStringArray.Add^StringsExt.TStringArray.html#Add^^    ^0"
s[378] = "StringsExt.TStringArray.AddStrings^StringsExt.TStringArray.html#AddStrings^^    ^0"
s[379] = "StringsExt.TStringArray.AddStrings^StringsExt.TStringArray.html#AddStrings^^    ^0"
s[380] = "StringsExt.TStringArray.Assign^StringsExt.TStringArray.html#Assign^^    ^0"
s[381] = "StringsExt.TStringArray.Assign^StringsExt.TStringArray.html#Assign^^    ^0"
s[382] = "StringsExt.TStringArray.AssignTo^StringsExt.TStringArray.html#AssignTo^^    ^0"
s[383] = "StringsExt.TStringArray.AssignTo^StringsExt.TStringArray.html#AssignTo^^    ^0"
s[384] = "StringsExt.TStringArray.Clear^StringsExt.TStringArray.html#Clear^^    ^0"
s[385] = "StringsExt.TStringArray.Delete^StringsExt.TStringArray.html#Delete^^    ^0"
s[386] = "StringsExt.TStringArray.IndexOf^StringsExt.TStringArray.html#IndexOf^^    ^0"
s[387] = "StringsExt.TStringArray.IndexOfName^StringsExt.TStringArray.html#IndexOfName^^    ^0"
s[388] = "StringsExt.TStringArray.Insert^StringsExt.TStringArray.html#Insert^^    ^0"
s[389] = "StringsExt.TStringArray.Count^StringsExt.TStringArray.html#Count^^ ^0"
s[390] = "StringsExt.TStringArray.Names^StringsExt.TStringArray.html#Names^^ ^0"
s[391] = "StringsExt.TStringArray.Values^StringsExt.TStringArray.html#Values^^ ^0"
s[392] = "StringsExt.TStringArray.Strings^StringsExt.TStringArray.html#Strings^^ ^0"
s[393] = "StringsExt.TStringArray.ParsedString^StringsExt.TStringArray.html#ParsedString^^ ^0"
s[394] = "StringsExt.TStringArray.Parser^StringsExt.TStringArray.html#Parser^^ ^0"
s[395] = "StringsExt.TStringArray.Text^StringsExt.TStringArray.html#Text^^ ^0"
s[396] = "StringsExt.TWebParams^StringsExt.TWebParams.html^Specialized class to hold and manage parameters of web calls^ ^0"
s[397] = "StringsExt.TWebParams.SetEncoding^StringsExt.TWebParams.html#SetEncoding^^    ^0"
s[398] = "StringsExt.TWebParams.GetCount^StringsExt.TWebParams.html#GetCount^^    ^0"
s[399] = "StringsExt.TWebParams.GetParam^StringsExt.TWebParams.html#GetParam^^    ^0"
s[400] = "StringsExt.TWebParams.SetParam^StringsExt.TWebParams.html#SetParam^^    ^0"
s[401] = "StringsExt.TWebParams.GetAsURL^StringsExt.TWebParams.html#GetAsURL^^    ^0"
s[402] = "StringsExt.TWebParams.SetAsURL^StringsExt.TWebParams.html#SetAsURL^^    ^0"
s[403] = "StringsExt.TWebParams.GetText^StringsExt.TWebParams.html#GetText^function ParseToURL(Source: TStringArray): String; dynamic;^    ^0"
s[404] = "StringsExt.TWebParams.SetText^StringsExt.TWebParams.html#SetText^^    ^0"
s[405] = "StringsExt.TWebParams.Create^StringsExt.TWebParams.html#Create^^    ^0"
s[406] = "StringsExt.TWebParams.Destroy^StringsExt.TWebParams.html#Destroy^^    ^0"
s[407] = "StringsExt.TWebParams.Initialize^StringsExt.TWebParams.html#Initialize^^    ^0"
s[408] = "StringsExt.TWebParams.AddStrings^StringsExt.TWebParams.html#AddStrings^^    ^0"
s[409] = "StringsExt.TWebParams.Insert^StringsExt.TWebParams.html#Insert^^    ^0"
s[410] = "StringsExt.TWebParams.InsertValue^StringsExt.TWebParams.html#InsertValue^^    ^0"
s[411] = "StringsExt.TWebParams.Encoding^StringsExt.TWebParams.html#Encoding^^ ^0"
s[412] = "StringsExt.TWebParams.Count^StringsExt.TWebParams.html#Count^peLocale;^ ^0"
s[413] = "StringsExt.TWebParams.Required^StringsExt.TWebParams.html#Required^^ ^0"
s[414] = "StringsExt.TWebParams.Optional^StringsExt.TWebParams.html#Optional^^ ^0"
s[415] = "StringsExt.TWebParams.Parameters^StringsExt.TWebParams.html#Parameters^^ ^0"
s[416] = "StringsExt.TWebParams.URLEncoded^StringsExt.TWebParams.html#URLEncoded^^ ^0"
s[417] = "StringsExt.TWebParams.Text^StringsExt.TWebParams.html#Text^^ ^0"
s[418] = "StringsExt.StringToUTF8^StringsExt.html#StringToUTF8^^    ^0"
s[419] = "StringsExt.UTF8ToString^StringsExt.html#UTF8ToString^^    ^0"
s[420] = "StringsExt.URLEncode^StringsExt.html#URLEncode^Encodes a string for insertion in a URL.^ This function isn't intended to encode full URIs, but the strings used to build them. If you pass a whole URI the result will probably not be usable as a URI anymore. See the overloaded TStrings version for a sample of use.    ^0"
s[421] = "StringsExt.URLEncode^StringsExt.html#URLEncode^Returns the TStrings 'Params' text encoded as a URL request params string.^ Note that it'll add a field even if its value is an empty string.    <p>The actual encoding is made in the overloaded 'String parameter' variant.    ^0"
s[422] = "StringsExt.TStringsParser^StringsExt.html#TStringsParser^forward^    ^0"
s[423] = "StringsExt.TParamEncoding^StringsExt.html#TParamEncoding^^  peNone    peANSI    peUtf8   ^0"
